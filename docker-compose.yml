version: '3.8'

services:
  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # PostgreSQL/TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: etf_trading
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Prediction API
  prediction-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - DATABASE_URL=postgresql://trading_user:${DB_PASSWORD:-changeme}@postgres:5432/etf_trading
      - MODEL_VERSION=${MODEL_VERSION:-latest}
    depends_on:
      - redis
      - postgres
    volumes:
      - ./models:/app/models:ro
      - ./config:/app/config:ro

  # Model trainer (GPU support)
  model-trainer:
    build:
      context: .
      dockerfile: docker/Dockerfile.trainer
    environment:
      - REDIS_HOST=redis
      - DATABASE_URL=postgresql://trading_user:${DB_PASSWORD:-changeme}@postgres:5432/etf_trading
      - WANDB_API_KEY=${WANDB_API_KEY}
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./checkpoints:/app/checkpoints
      - ./config:/app/config:ro
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources

  # Prometheus metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Jupyter notebook for research
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-etf_trading}
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./src:/home/jovyan/src

volumes:
  redis_data:
  postgres_data:
  grafana_data:
  prometheus_data: